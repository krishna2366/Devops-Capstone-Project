---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: echo
spec:
  description: This task will echo the message.
  params:
    - name: message
      description: The message to echo
      type: string
  steps:
    - name: echo-message
      image: alpine:3
      command: [/bin/echo]
      args: ["$(params.message)"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all of the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        # Delete any existing contents of the directory if it exists.
        #
        # We don't just "rm -rf ${WORKSPACE_SOURCE_PATH}" because ${WORKSPACE_SOURCE_PATH} might be "/"
        # or the root of a mounted volume.
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Code Quality
    tekton.dev/tags: python, flake8, linter
    tekton.dev/displayName: flake8
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run flake8 on the provided input.

  workspaces:
    - name: source
  params:
    - name: image
      description: The container image with flake8
      default: docker.io/alpine/flake8@sha256:bb280bf2af4a434be912f25bbcb6c79ea4d735ed3c8e259f96c405998920871f
    - name: path
      description: The path to the module which should be analysed by flake8
      default: "."
      type: string
    - name: requirements_file
      description: The name of the requirements file inside the source location
      default: "requirements.txt"
    - name: args
      description: The arguments to pass to the flake8 CLI.
      type: array
      default: []
  steps:
    - name: flake8
      image: $(params.image)
      workingDir: $(workspaces.source.path)
      script: |
        export HOME=/tmp/python
        export PATH=$PATH:/tmp/python/.local/bin
        if [ -n "$(params.requirements_file)" ] && [ -e "$(params.requirements_file)" ];then
            python -mpip install --user -r $(params.requirements_file)
        fi
        flake8 $@ $(params.path)
      args:
        - $(params.args)

